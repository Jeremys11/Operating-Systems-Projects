Running Code from home directory:

    Recommended on Bash Terminals on Linux/MacOS
    Should work on Windows

    Run each of the lines from server.sh in a different terminal to set up reading and writing servers
    Run the client using bash client.sh

Running Server:

    Starting Server:
        go run tokenserver/tokenserver.go -port <STRING>

Running Client:

    Create:
        go run tokenclient/tokenclient.go -create -id <STRING>

    Write:
        go run tokenclient/tokenclient.go -write -id <STRING> -name <STRING> -low <UINT64> -mid <UINT64> -high <UINT64>

    Read:
        go run tokenclient/tokenclient.go -read -id <STRING> -host <STRING>

    Drop:
        go run tokenclient/tokenclient.go -drop -id <STRING>

Project 3 Specifics:

    The program is hard coded to fail-silent for 5 seconds whenever token ID=2 is read or written

    For atomic semantics, a write command must be performed on a token before a read command will execute
    without simply returning nothing.

    Since the project focuses on read and write consistency, I did not include the drop function in the testing files
    but it has been implemented to support the updates to this project.

    The Yaml Specification -- file name and file location are hard coded into the server and client files.
    The client abd server read the writer and reader server information from the yaml file each time there 
    is a new rpc call.


Possible Errors:

    Need to recompile runserver:

        export PATH="$PATH:$(go env GOPATH)/bin"

        protoc --go_out=. --go_opt=paths=source_relative --go-grpc_out=. --go-grpc_opt=paths=source_relative runserver/runserver.proto

Unarchive:

    tar -xvzf Project3.tar.gz